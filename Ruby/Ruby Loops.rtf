{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh6760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs26 \cf0 Ruby Loops\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0\fs24 \cf0 \ul \ulc0 Basic Loop Syntax\
\

\b \ulnone loop do\
  print \'93Run this code\'94\
end
\b0 \
\
OR\
\

\b loop \{print \'93Run this code\'94\}
\i\b0 \
\

\i0 ** It is best practices to use curly braces when loop only contains one line of code\
** Above examples will result in infinite loops\
\

\b \
loop do\
  print "Do you want to continue? (y/n) "\
  answer = gets.chomp.downcase\
  if answer == "n"\
    break\
  end\
end
\i\b0 \
\

\i0 OR\
\

\b loop do\
  print "Do you want to continue? (y/n) "\
  answer = gets.chomp.downcase\
  break if answer == "n"\
end
\i\b0 \
\

\i0 ** These loops will end when user answers \'93n\'94\
\
\
\ul While Loop Syntax\
\

\b \ulnone while answer != \'93n\'94\
  print \'93Run loop again? (y/n)\'94\
  answer = gets.chomp.downcase\
end\
\

\b0 ** Loop will run until user answers \'93n\'94 or \'93N\'94\
\

\b def print_hello(reps)\
  i = 0\
  while i < reps\
    puts \'93hello\'94\
    i += i\
  end\
end
\b0 \
\
** Will print \'93hello\'94 to screen the number of times entered as \'93reps\'94\
\
\
\ul Until Loop Syntax\ulnone  (opposite of \'93while\'94 loop)\ul \
\

\b \ulnone answer = ""\
until answer == "no" do\
  print "Do you want this loop to continue? (y/n) "\
  answer = gets.chomp\
end
\b0 \
\
** Loop will run 
\i until 
\i0 user enters the answer \'93no\'94\
\
\
\ul Origin of Each Loop\
\
\pard\pardeftab720
\cf0 \ulnone def each(&block)\
  i = 0\
  while i < array.length\
    block.call(array[i])\
    i += 1\
  end\
  array\
end\ul \
\
\ulnone my_array.each\{ | item | puts "item: #\{item\}" \}\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
Each Loop Syntax\
\

\b \ulnone array = [1, 2, "three"]\
array.each do | item |\
  puts "The current array item is: #\{item\}"\
end\
\

\b0 OR\
\

\b array = [1, 2, "three"]\
array.each \{ | item |\
  puts "The current array item is: #\{item\}"\
\}\
\

\b0 each_with_index:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 array = [1, 2, "three"]\
array.each_with_index \{ | item, index |\
  puts \'93Item #\{index + 1\} is: #\{item\}"\
\}
\b0 \
\
Each loops with Hashes: \
\
** Using an each loop with one argument on a hash instead of an array will present each hash as a two item array, with the first item being the hash key and the second item being the hash value\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 hash = \{:one => "hello", :two => "goodbye", :three => "thanks"\}\
\
hash.each do | key, value |\
  puts "The hash key is #\{key\} and the value is #\{value\}."\
end\
\

\b0 ** This loop will print out both the key and value as separate arguments\
\

\b hash.each_key do | key |\
  puts "Key: #\{key\}"\
end
\b0 \
\
OR \
\

\b hash.keys.each do | key |\
  puts "Key: #\{key\}"\
end
\b0 \
\
** These loops will only loop through hash keys, ignoring values\
\

\b hash.each_value do | value |\
  puts \'93Value: #\{value\}\'94\
end
\b0 \
\
OR \
\

\b hash.values.each do | value |\
  puts \'93Value: #\{value\}\'94\
end
\b0 \
\
** These loops will only loop through hash value, ignoring keys\
\
\
\ul Map/Collect Iteration\
\
\ulnone ** Using the \'93.each\'94 iterator will always return the original array, but using \'93.map\'94 or \'93.collect\'94 (same exact method), you may return an array of results instead\
\
ex:\

\b arr = [1, 2, true, \'93you\'94]\
\
arr.each do | item |\
  \'93Item: #\{item.to_s\}\'94\
end\
\
arr.map do | item |\
  \'93Item: #\{item.to_s\}\'94\
end\
\

\b0 ** The \'93.each\'94 loop will return the original array of [1, 2, true, \'93you\'94] while the \'93.map\'94 loop will return the away [\'93Item: 1\'94, \'93Item: 2\'94, \'93Item: true\'94, \'93Item: you\'94]\
\
\
\ul Times Loop Syntax\
\

\b \ulnone 5.times do\
  puts "Hello!"\
end\
\

\b0 ** This loop will print the string \'93Hello!\'94 5 times\
\

\b 5.times do | num |\
  puts "Item #" + (num+1).to_s\
end\
\

\b0 ** This loop will print out 5 separate strings, beginning with \'93Item #1\'94 and continuing to \'93Item #5\'94
\b \
\
\

\b0 \ul For Loop Syntax\
\

\b \ulnone for item in -1..3 do\
  puts "Current item: #\{item\}"\
end\
\

\b0 ** This loop will print out 5 separate statements, beginning with \'93Current item: -1\'94 and ending with \'93Current item: 3\'94
\b \
\
array = [1, 2, "three"]\
\
for item in array\
  puts "Array item: #\{item\}"\
end\
\

\b0 ** This loop will print out 3 separate statements, printing the name of each array item to the screen
\b \
}