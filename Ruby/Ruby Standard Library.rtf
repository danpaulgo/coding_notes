{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11480\viewh6440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs26 \cf0 Ruby Standard Library\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://ruby-doc.org/stdlib-2.2.2/"}}{\fldrslt 
\b0\fs24 \cf0 http://ruby-doc.org/stdlib-2.2.2/}}
\b0\fs24 \
\
Classes to look into:\
- forwardable\
- observer\
- prettyprint\
- optparse\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 Date Class\
\

\b0 \ul Set date manually\ulnone \
\
Using Date syntax:\
` today = Date.new(2016, 10, 21) `\
\
Using String:\
` tomorrow = Date.parse(\'93October 22nd, 2016\'94) `\
` yesterday = Date.parse(\'93Oct 20 2016\'94) `\
` today = Date.parse(\'9322-10-2016\'94) ` 
\i (notice order of date)
\i0 \
` today = Date.strptime(\'9310-22-16\'94, \'93%m/%d/%y\'94) ` 
\i (allows user to set date order)\
\
\

\i0 \ul Set date automatically\
\
\ulnone Get today\'92s date:\ul \
\ulnone ` today = Date.today `\
\
Change date by day/week/month:\
` tomorrow = Date.today + 1 `\
` last_week = Date.today - 7 `\
` next_month = Date.today >> 1 `\
` last_month = Date.today << 1 `\
\
\
\ul Change Date Format:\
\
\ulnone ` Date.today.strftime(\'93%Y %m, %d\'94) ` 
\i (case sensitive)
\i0 \
\
\
Format Settings:\
\
Date (Year, Month, Day):\
  %Y - Year with century if provided, will pad result at least 4 digits. (0001, 0000, 1995, 2009, 14292, etc.)\
  %C - year / 100 (rounded down such as 20 in 2009)\
  %y - year % 100 (00..99)\
\
  %m - Month of the year, zero-padded (01..12)\
%_m  blank-padded ( 1..12)\
%-m  no-padded (1..12)\
  %B - The full month name (``January'')\
%^B  uppercased (``JANUARY'')\
  %b - The abbreviated month name (``Jan'')\
 %^b  uppercased (``JAN'')\
  %h - Equivalent to %b\
\
  %d - Day of the month, zero-padded (01..31)\
  %-d  no-padded (1..31)\
  %e - Day of the month, blank-padded ( 1..31)\
\
  %j - Day of the year (001..366)\
\
\

\b Time Class
\b0 \ul \
\
Set Time Manually\
\
\ulnone ` birthday = Time.new(1993, 6, 18, 9, 30, 26) `\
** would output 1993-06-18 09:30:26\
\
Get info from Time object:\
` birthday.year `\
` birthday.month `\
` birthday.day `\
` birthday.hour `\
` birthday.min `\
` birthday.sec `\
\
\ul Set Current Time\
\
\ulnone ` now = Time.new `\
\
\ul Edit Time\
\
\ulnone ` min_from_now = now + 60 `\
` hour_from_now = now + (60*60)\
` day_from_now = now + 60 *60 *24 `\
\
` birthday.to_a ` returns [26, 30, 9, 18, 1993, 5, 169, true, \'93EDT\'94]\
** Array stands for: second, minute, hour, day, year, day of week, day of year, daylight savings? (boolean), timezone (including daylight savings)\
\
\
\ul Format Time\
\
\ulnone ` birthday.strftime(\'93%B %-d, %Y\'94) ` returns \'93June 18, 1993\'94\
\
Change timezone:\
Time.new(2005, 7, 4, 12, 0, 0, \'93+06:00\'94)\
\
\
\ul JSON in Ruby\
\
\ulnone ** ` require \'93json\'94 `\ul \
\
\ulnone Converting string to hash:\
` hash_string = \'91 \{\'93name\'94: \'93Daniel\'94, \'93age\'94: 23\} \'92 ` (note: key must be string)\
` hash = JSON.parse(hash_string) `\
\
Converting hash to string:\
` hash1 = \{name: \'93Dan\'94, fav_numbers: [10, 7, \'93five\'94]\} `\
` hash_to_string = JSON.dump(hash1) `\
\
** You can load JSON data from another file by using \'93JSON.load\'94 method\
ex: ` JSON.load(File.new(\'93./example.json\'94)) `\
\
\
\ul YAML\
\
\ulnone ** ` require \'93yaml\'94 `\ul \
\
\ulnone YAMLSyntax:\
\
Creating a YAML array of hashes:\
\
---  \
- name: \'93Daniel\'94\
  age: 23\
- name: \'93Lina\'94\
  age: 25\
\ul \
\ulnone The above code could be saved into a \'93file.yml\'94 file and loaded into the console using:\
` YAML.load_file(\'93file.yml\'94) `\
\
Which would return the array in Ruby form:\
` [\{\'93name\'94 => \'93Daniel\'94, \'93age\'94 => 23\}, \{\'93name\'94 => \'93Lina\'94, \'93age\'94 => 25\}]\
\
Ruby data can be converted into YAML syntax using \'93to_yaml\'94 command\
ex: \
` arr = [1, 2, true, \'93you\'94] `\
` yaml_arr = arr.to_yaml `\
\
** Then convert back to ruby using:\
` YAML.load(yaml_arr) `\ul \
\ulnone \
\
\ul Base 64\
\
\ulnone ** ` require \'93base64\'94 `\
\
Convert string to binary:\
` Base64.encode64(\'93Hello\'94) ` (returns \'93SGVsbG8=\\n\'94)\
` Base64.strict_encode64(\'93Hello\'94) ` (returns \'93SGVsbG8=\'94) (no line variable at end)\
\
\
Decode binary back to string:\
` Base64.decode(\'93SGVsbG8=\'94) ` (returns \'93Hello\'94)\
\
\
\
\ul Logger\
\
\ulnone ** ` require \'93logger\'94 `\
\
** A logger can be used in a function to log data every time the function is run\
ex:\

\b logger = Logger.new(\'93square_log.txt\'94)\
  def square_number(n)\
	logger.info \'93One has been added\
	n**\
  end\
  square_number(10)
\b0 \
(This will return the integer 100, as well as adding an info log to the \'93square_log.txt\'94 file)\
\
	\
\
Log to standard output: \
` logger = Logger.new(STDOUT) `\
\
Log to file:\
` logger = Logger.new(\'93file_name.txt\'94) `\
\
Logger Commands:\
\
` logger.info \'93message\'94 `\
` logger.debug \'93message\'94 `\
` logger.warn \'93message\'94 `\
` logger.fatal \'93message\'94 `\
\
\
\
}