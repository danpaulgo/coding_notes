{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11200\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs26 \cf0 Dynamic ORM\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0\fs24 \cf0 Dynamic ORM allows you to use a created database in order to automatically create all basic ORM methods (insert, update, select, delete)\
\
** The following methods are usually included inside a parent class and can be used in any child class thanks to the dynamic structure. HOWEVER, That attr_accessor iterator needs to be specifically included in every child class, but still utilizes the \'93self.column_names\'94 method from the parent class\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul \ulc0 Building attr_accessor/initialize From Column Names\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ulnone 1. Convert class name to table name (identify table name)\
\

\b def self.table_name\
  self.to_s.downcase.pluralize\
end\
\

\b0 2. Grab all column names\
\

\b DB[:conn].results_as_hash = true\
\
def self.column_names\
  column_info = DB[:conn].execute(\'93PRAGMA table_info(#\{self.table_name\})
\b0 \
  
\b column_info.map\{ | column | column[\'93name\'94]\}.compact 
\i\b0 (compact removes any nil values in resulting array)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 end\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\i0\b0 \cf0 3. Create attr_accessors \
\

\b self.column_names.each do | name |\
  attr_accessor col_name.to_sym\
end\

\b0 ** Note that this loop is not inside a method because it simply creates a list of attr_accessors which will be needed at instantiation \
\
4. Create abstract initialize method ()\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 def initialize(attributes)\
  attributes.each do | key, value |\
    self.send((\'93#\{key\}=\'94), value)\
  end\
end
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\i \cf0 (also seen in Ruby\'92s \'93Metaprogramming - Mass Assignment\'94)
\i0 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul Refactoring Conventional ORM Methods\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ulnone Save:\
\

\b def save\
  sql = <<-SQL\
    INSERT INTO ? (?)\
    VALUES (?)\
  SQL\
  table_name = self.class.table_name\
  column_names = self.class.column_names.delete_id\{ | col | col == \'93id\'94\}.join(\'93, \'94)\
  column_values = self.column_names.map\{ | name |  \'93 \'91#\{send(name)\}\'92 \'94\}.join(\'93, \'94)\
  DB[:conn].execute(sql, table_name, column,names, column_values)\
end
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\i \cf0 (Note the double set of quotes surrounding the send method. The original array will contain a list of strings within strings ([\'93 \'91 content 1 \'92 \'94, \'93 \'91 content 2\'92 \'94]) but when joined, it will simply be one string consisting of multiple strings which can easily be used within our SQL statement)
\i0 \
\
\
Find_by_name:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 def self.find_by_name\
  sql = <<-SQL\
    SELECT * FROM ?\
    WHERE name = ?\
  SQL
\b0 \
  
\b DB[:conn].execute(sql, self.table_name, name)\
end
\b0 \
\
\
}