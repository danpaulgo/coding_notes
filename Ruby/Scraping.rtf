{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs26 \cf0 Scraping\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 Nokogiri\
\

\b0 ** Nokogiri is a Ruby gem that helps us parse HTML and collect data from it.\
\
Installing Nokogiri: 
\b ` gem install nokogiri `\
\

\b0 ** In order to scrape webpage, we must require both \'93nokogiri\'94 and \'93open-uri\'94 at the top of our project file. The \'93open\'94 method (open-uri) can be used in combination with the \'93Nokogiri::HTML\'94 method in order to create a variable consisting of a web pages complete HTML content\
\
ex:\

\b ` require 'nokogiri'\
require 'open-uri'\
 \
doc = Nokogiri::HTML(open("http://flatironschool.com/")) `\
\

\b0 \ul CSS/Text Methods\
\
{\field{\*\fldinst{HYPERLINK "http://ruby.bastardsbook.com/chapters/html-parsing/"}}{\fldrslt \ulnone http://ruby.bastardsbook.com/chapters/html-parsing/}}\
\
\ulnone ** Nokogiri\'92s \'93.css\'94 method is used to pull specific data from an HTML file based on CSS selectors such as class and id. \'93.text\'94 method may be used to return text content (without HTML tags/syntax)\
\
ex:\

\b ` doc.css(\'93.site-hero__subhead\'94).text `\

\b0 ** This will return any text content held inside the CSS class \'93site-hero__subhead\'94 on the flatiron school homepage. \'93.css\'94 method may also be used to select data specified by ID or tag name:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 ` doc.css(\'93body\'94) `\
` doc.css(\'93#id_name\'94) `
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
\ul Iterating Over Elements\ulnone \
\
** If the \'93.css\'94 method returns multiple elements, these elements may be iterated over to one by one\
\
ex:\

\b cl = Nokogiri::HTML(open(\'93http://longisland.craigslist.org/\'94))\
days = cl.css(\'93.days\'94)\
days.each\{ |day| puts day.text \}\

\b0 ** This will print to the page the content of each section within the \'93days\'94 class
\b \
\
\
\

\b0 \
}