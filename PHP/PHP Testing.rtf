{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9320\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 PHP Testing\
\

\b Unit Tests
\b0 : Tests that are written to verify that individual modules of code are functioning the way that you expect.\
\
- Unit tests should be small, run quickly, and don\'92t talk to real things (i.e. databases or third party APIs)\
\
PHPUnit: A collection of tools designed to allow you to write and run tests for your PHP code\
\
** PHPUnit will not write tests for you\
** The code written in that actual test will often track very closely to how the code will be used in the application\
\
\
\
Integration Tests: Individual software modules are combined and tested as a group\
\
- Integration tests should be slow, have units of code talking to each other, and may talk to real things (i.e. databases and third party  APIs)\
\
** When running integration tests, make sure they are critical to the well-being of the application and make sure you are constantly refreshing test data \
\
\
Functional Tests (Treehouse): Verifies that the application itself is behaving correctly. Usually consists of writing automated tests that use tools that simulate someone actually using the application. \
\
Functional Tests (Udemy): Tests to see if a feature of the code does what it is supposed to according to specifications \
\
- Functional tests are very slow and not all tasks can be automated\
\
Tools must be able to:\
- Start up web browser\
- Read in DOM from web page\
- Click on things\
- Wait for pages to render\
- Return results to test runner\
\
** Write functional tests only for parts of application that absolutely have to be working. Otherwise put up \'93under maintenance\'94 sign\
\
\
\
Acceptance Tests: Making sure the application behaves as it is supposed to when opened in web browser\
\
\
}